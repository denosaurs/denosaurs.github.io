(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{75:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return d}));var a=t(2),l=t(6),s=(t(0),t(87)),r=t(92),o=t(93),c={title:"Script Options"},i={unversionedId:"denon/configuration/script",id:"denon/configuration/script",isDocsHomePage:!1,title:"Script Options",description:"For the sake of brevity Typescript example omit the import for the DenonConfig:",source:"@site/docs/denon/configuration/script.md",permalink:"/docs/denon/configuration/script",editUrl:"https://github.com/denosaurs/website/edit/master/docs/denon/configuration/script.md",sidebar:"denon",previous:{title:"Templates",permalink:"/docs/denon/configuration/templates"},next:{title:"Watcher Options",permalink:"/docs/denon/configuration/watcher"}},p=[{value:"Scripts",id:"scripts",children:[]},{value:"Script Options",id:"script-options",children:[{value:"Environment variables",id:"environment-variables",children:[]},{value:"Permissions",id:"permissions",children:[]},{value:"File watching",id:"file-watching",children:[]},{value:"Import Map",id:"import-map",children:[]},{value:"TS config",id:"ts-config",children:[]},{value:"Unstable",id:"unstable",children:[]},{value:"Inspect and InspectBrk",id:"inspect-and-inspectbrk",children:[]},{value:"Cert",id:"cert",children:[]},{value:"Log",id:"log",children:[]}]}],b={rightToc:p};function d(e){var n=e.components,t=Object(l.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("div",{className:"admonition admonition-info alert alert--info"},Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(s.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"info")),Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("p",{parentName:"div"},"For the sake of brevity Typescript example omit the import for the ",Object(s.b)("inlineCode",{parentName:"p"},"DenonConfig"),":"),Object(s.b)("p",{parentName:"div"},Object(s.b)("inlineCode",{parentName:"p"},'import { DenonConfig } from "https://deno.land/x/denon/mod.ts";')))),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},"Denon")," takes inspiration from the awesome ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/umbopepato/velociraptor"}),"velociraptor")," module in the way it handles scripts."),Object(s.b)("h2",{id:"scripts"},"Scripts"),Object(s.b)("p",null,"Scripts are declared inside the ",Object(s.b)("inlineCode",{parentName:"p"},"scripts")," object and are identified by a name:"),Object(s.b)(r.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(s.b)(o.a,{value:"json",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    // they all resolve to `deno run app.ts` when you run `denon start`\n    "start": "app.ts",\n    // OR\n    "start": "run app.ts",\n    // OR\n    "start": "deno run app.ts"\n  }\n}\n'))),Object(s.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'\nscripts:\n  # they all resolve to `deno run app.ts` when you run `denon start`\n  start: "app.ts"\n  # OR\n  start: "run app.ts"\n  # OR\n  start: "deno run app.ts"\n\n\n'))),Object(s.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    // they all resolve to `deno run app.ts` when you run `denon start`\n    start: "app.ts",\n    // OR\n    start: "run app.ts",\n    // OR\n    start: "deno run app.ts",\n  },\n};\n')))),Object(s.b)("p",null,"Scripts can also be defined by a complex object:"),Object(s.b)(r.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(s.b)(o.a,{value:"json",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      // with an optional description that\n      // is shown when you run `denon` to list\n      // all the available\n      "desc": "Run the main server.",\n\n      // available options...\n      // they are described in the next paragraph\n      "allow": ["env", "write"],\n      "unstable": true\n\n      // running `denon start` will resolve in\n      // deno run --allow-env --allow-write --unstable app.ts\n    }\n  }\n}\n'))),Object(s.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'scripts:\n  start:\n    cmd: "deno run app.ts"\n    # with an optional description that\n    # is shown when you run `denon` to list\n    # all the available\n    desc: "Run the main server."\n\n    # avaiable options\n    # they are described in the next paragraph\n    allow:\n      - env\n      - write\n    unstable: true\n# running `denon start` will resolve in\n# deno run --allow-env --allow-write --unstable app.ts\n'))),Object(s.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      // with an optional description that\n      // is shown when you run `denon` to list\n      // all the available\n      desc: "Run the main server.",\n\n      // available options...\n      // they are described in the next paragraph\n      allow: ["env", "write"],\n      unstable: true,\n\n      // running `denon start` will resolve in\n      // deno run --allow-env --allow-write --unstable app.ts\n    },\n  },\n};\n')))),Object(s.b)("h2",{id:"script-options"},"Script Options"),Object(s.b)("p",null,"Options can be script specific or be declared as global in the root of the config file."),Object(s.b)("h3",{id:"environment-variables"},"Environment variables"),Object(s.b)("p",null,"Environment variables can be provided as an object and are passed directly to the child process."),Object(s.b)(r.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(s.b)(o.a,{value:"json",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  // globally applied to all scripts\n  "env": { "TOKEN": "SUPER SECRET TOKEN" },\n\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      // made available only in the\n      // `start` script\n      "env": { "PORT": 3000 }\n    }\n  }\n}\n'))),Object(s.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'# globally applied to all scripts:\nenv:\n  TOKEN: "super secret token"\n\nscripts:\n  start:\n    cmd: "deno run app.ts"\n    desc: "Run the main server."\n\n    # made available only in the\n    # `start` script\n    env:\n      PORT: 3000\n'))),Object(s.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  // globally applied to all scripts\n  env: { TOKEN: "SUPER SECRET TOKEN" },\n\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      // made available only in the\n      // `start` script\n      env: { PORT: 3000 },\n    },\n  },\n};\n')))),Object(s.b)("h3",{id:"permissions"},"Permissions"),Object(s.b)("p",null,"Permission can be granted to child processes. You can provide specific permissions for each script,\nbut you can also declare permissions globally, following the same format."),Object(s.b)(r.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(s.b)(o.a,{value:"json",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  // globally applied to all scripts\n  // as object ...\n  "allow": {\n    "read": "/etc,/tmp", // --allow-read=/etc,/tmp\n    "env": true // --allow-env\n  },\n  // ... or as array\n  "allow": [\n    "run", // --allow-run\n    "net" // --allow-net\n  ],\n\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n\n      // specific for a single script\n      // as object ...\n      "allow": {\n        "read": "/etc,/tmp", // --allow-read=/etc,/tmp\n        "env": true // --allow-env\n      },\n      // ... or as array\n      "allow": [\n        "run", // --allow-run\n        "net" // --allow-net\n      ]\n    }\n  }\n}\n'))),Object(s.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'\n# globally applied to all scripts\n# as object ...\nallow:\n  read: "/etc,/tmp" # --allow-read=/etc,/tmp\n  env: true # --allow-env\n# ... or as array\nallow:\n  - "run" # --allow-run\n  - "net" # --allow -net\n\nscripts:\n  start:\n    cmd: deno run app.ts\n\n    # specific for a single script\n    # as object ...\n    allow:\n      read: "/etc,/tmp" # --allow-read=/etc,/tmp\n      env: true # --allow-env\n    # ... or as array\n    allow:\n      - "run" # --allow-run\n      - "net" # --allow -net\n\n\n\n\n\n\n\n'))),Object(s.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  // globally applied to all scripts\n  // as object ...\n  allow: {\n    read: "/etc,/tmp", // --allow-read=/etc,/tmp\n    env: true, // --allow-env\n  },\n  // ... or as array\n  allow: [\n    "run", // --allow-run\n    "net", // --allow-net\n  ],\n\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n\n      // specific for a single script\n      // as object ...\n      allow: {\n        read: "/etc,/tmp", // --allow-read=/etc,/tmp\n        env: true, // --allow-env\n      },\n      // ... or as array\n      allow: [\n        "run", // --allow-run\n        "net", // --allow-net\n      ],\n    },\n  },\n};\n')))),Object(s.b)("h3",{id:"file-watching"},"File watching"),Object(s.b)("p",null,"While file watching is a core feature of ",Object(s.b)("inlineCode",{parentName:"p"},"denon")," you always have the option\nof disabling file watching and run a script only once:"),Object(s.b)(r.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(s.b)(o.a,{value:"json",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  // globally applied to all scripts\n  // now denon will essentialy be a script runner\n  "watch": false,\n\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      // you can still enable watch on a script-by-script basis\n      "watch": true\n    }\n  }\n}\n'))),Object(s.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),"# globally applied to all scripts\n# not denon will essentially be a script runner\nwatch: false\n\nscripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  # you can still enable watch on a script-by-script basis\n  watch: false\n"))),Object(s.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  // globally applied to all scripts\n  // now denon will essentialy be a script runner\n  watch: false,\n\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      // you can still enable watch on a script-by-script basis\n      watch: true,\n    },\n  },\n};\n')))),Object(s.b)("h3",{id:"import-map"},"Import Map"),Object(s.b)("p",null,"Load import map file. Take a look a at the ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"https://deno.land/manual/linking_to_external_code/import_maps"}),"official docs")," for additional info."),Object(s.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(s.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"caution")),Object(s.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("p",{parentName:"div"},"This feature in unstable in the current version of the deno executable."))),Object(s.b)(r.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(s.b)(o.a,{value:"json",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      "importmap": "importmap.json"\n    }\n  }\n}\n'))),Object(s.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'scripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  importmap: "importmap.json"\n'))),Object(s.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      importmap: "importmap.json",\n    },\n  },\n};\n')))),Object(s.b)("h3",{id:"ts-config"},"TS config"),Object(s.b)("p",null,"Load tsconfig.json configuration file:"),Object(s.b)(r.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(s.b)(o.a,{value:"json",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      "tsconfig": "tsconfig.json"\n    }\n  }\n}\n'))),Object(s.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'scripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  tsconfig: "tsconfig.json"\n'))),Object(s.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      tsconfig: "tsconfig.json",\n    },\n  },\n};\n')))),Object(s.b)("h3",{id:"unstable"},"Unstable"),Object(s.b)("p",null,"Enable if the script is using unstable features of deno runtime:"),Object(s.b)(r.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(s.b)(o.a,{value:"json",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      "unstable": true\n    }\n  }\n}\n'))),Object(s.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),"scripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  unstable: true\n"))),Object(s.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      unstable: true,\n    },\n  },\n};\n')))),Object(s.b)("h3",{id:"inspect-and-inspectbrk"},"Inspect and InspectBrk"),Object(s.b)("p",null,"Activate inspector on ",Object(s.b)("inlineCode",{parentName:"p"},"host:port"),". If ",Object(s.b)("inlineCode",{parentName:"p"},"inspectBrk")," is used the executions breaks at the start of the user script:"),Object(s.b)(r.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(s.b)(o.a,{value:"json",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      "inspect": "127.0.0.1:9229",\n      // OR\n      "inspectBrk": "127.0.0.1:9229"\n    }\n  }\n}\n'))),Object(s.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'\nscripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  inspect: "127.0.0.1:9229",\n  # OR\n  inspectBrk: "127.0.0.1:9229"\n\n\n\n\n'))),Object(s.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      inspect: "127.0.0.1:9229",\n      // OR\n      inspectBrk: "127.0.0.1:9229",\n    },\n  },\n};\n')))),Object(s.b)("h4",{id:"lockfile"},"Lockfile"),Object(s.b)("p",null,"Check the specified lock file:"),Object(s.b)(r.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(s.b)(o.a,{value:"json",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      "lock": "lock.json"\n    }\n  }\n}\n'))),Object(s.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'scripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  lock: "lock.json"\n'))),Object(s.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      lock: "lock.json",\n    },\n  },\n};\n')))),Object(s.b)("h3",{id:"cert"},"Cert"),Object(s.b)("p",null,"Load certificate authority from PEM encoded file:"),Object(s.b)(r.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(s.b)(o.a,{value:"json",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      "cert": "cert.pem"\n    }\n  }\n}\n'))),Object(s.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'scripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  cert: "cert.pem"\n'))),Object(s.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      cert: "cert.pem",\n    },\n  },\n};\n')))),Object(s.b)("h3",{id:"log"},"Log"),Object(s.b)("p",null,"Set log level: (possible values: ",Object(s.b)("inlineCode",{parentName:"p"},"debug"),", ",Object(s.b)("inlineCode",{parentName:"p"},"info"),")"),Object(s.b)(r.a,{groupId:"configuration-format",defaultValue:"json",values:[{label:"JSON",value:"json"},{label:"YML",value:"yaml"},{label:"Typescript",value:"typescript"}],mdxType:"Tabs"},Object(s.b)(o.a,{value:"json",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json",metastring:'title="denon.json"',title:'"denon.json"'}),'{\n  "scripts": {\n    "start": {\n      "cmd": "deno run app.ts",\n      "desc": "Run the main server.",\n\n      "log": "debug" // or "info"\n    }\n  }\n}\n'))),Object(s.b)(o.a,{value:"yaml",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-yml",metastring:'title="denon.yml"',title:'"denon.yml"'}),'scripts:\n  cmd: deno run app.ts\n  desc: Run the main server.\n\n  log: "debug" # or "info"\n\n'))),Object(s.b)(o.a,{value:"typescript",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript",metastring:'title="denon.config.ts"',title:'"denon.config.ts"'}),'export default <DenonConfig>{\n  scripts: {\n    start: {\n      cmd: "deno run app.ts",\n      desc: "Run the main server.",\n\n      log: "debug", // or "info"\n    },\n  },\n};\n')))))}d.isMDXComponent=!0},92:function(e,n,t){"use strict";var a=t(0),l=t.n(a),s=t(95),r=t(85),o=t(51),c=t.n(o),i=37,p=39;n.a=function(e){var n=e.block,t=e.children,o=e.defaultValue,b=e.values,d=e.groupId,u=Object(s.a)(),m=u.tabGroupChoices,j=u.setTabGroupChoices,O=Object(a.useState)(o),g=O[0],v=O[1];if(null!=d){var y=m[d];null!=y&&y!==g&&b.some((function(e){return e.value===y}))&&v(y)}var f=function(e){v(e),null!=d&&j(d,e)},h=[];return l.a.createElement("div",null,l.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(r.a)("tabs",{"tabs--block":n})},b.map((function(e){var n=e.value,t=e.label;return l.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":g===n,className:Object(r.a)("tabs__item",c.a.tabItem,{"tabs__item--active":g===n}),key:n,ref:function(e){return h.push(e)},onKeyDown:function(e){return function(e,n,t){switch(t.keyCode){case p:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case i:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(h,e.target,e)},onFocus:function(){return f(n)},onClick:function(){return f(n)}},t)}))),l.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(t).filter((function(e){return e.props.value===g}))[0]))}},93:function(e,n,t){"use strict";var a=t(0),l=t.n(a);n.a=function(e){return l.a.createElement("div",null,e.children)}}}]);